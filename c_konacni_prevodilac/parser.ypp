%{
#include <iostream>
#include <cstdlib>
#include <string>
#include <vector>

#include "ast.hpp"
#define YYDEBUG 1
using namespace std;


void yyerror(string s){
	cerr << s << endl;
	exit(EXIT_FAILURE);
}
extern int yylex();

%}
%union{
	ExprAST *e;
	int i;
	string *s;
	vector<ExprAST*> *v;
	PrototypeAST *p;
	vector<string> *v1;
	FunctionAST *f;
	vector<PrototypeAST *> *p1;
	vector<FunctionAST*> *f1;
	 pair<string, ExprAST*> *p3;
  vector<pair<string, ExprAST*> > *v3;
}

%left var_token
%left ','
%left ':'
%nonassoc else_token
%right dodela_token
%left '-' '+'
%left '*' '/'


%type<e> E 
%type<v> NizArgs NizArgs1 
%type<p> Prototip Prot
%type<v1> Args Args1
%type<f> Blok Funkcija
%type<f1> NizFunkcija
%type<p1> NizPrototipova NizPrototipova1
%type<p3> Inic
%type<v3> NizInic
%token<i> num_token
%token<s> id_token

%token begin_token end_token dodela_token function_token  if_token then_token else_token extern_token var_token

%%
Program: NizPrototipova1 Blok '.'
{
	for(unsigned i = 0; i < $1->size();i++)
		(*$1)[i]->codegen();
	$2->codegen();
	
	//oslobadjamo memoriju
	for(unsigned i = 0; i< $1->size();i++)
		delete (*$1)[i];
	delete $1;
	
	delete $2;
}
|NizPrototipova1 NizFunkcija Blok '.' {
	for(unsigned i = 0; i < $1->size();i++)
		(*$1)[i]->codegen();
		
	for(unsigned i = 0; i < $2->size();i++)
		(*$2)[i]->codegen();
		
	$3->codegen();
	
	//oslobadjamo memoriju
	for(unsigned i = 0; i< $1->size();i++)
		delete (*$1)[i];
	delete $1;
	
	for(unsigned i = 0; i< $2->size();i++)
		delete (*$2)[i];
	delete $2;
	
	delete $3;
}
| NizPrototipova1 NizFunkcija{
	for(unsigned i = 0; i < $1->size();i++)
		(*$1)[i]->codegen();
	for(unsigned i = 0; i < $2->size();i++)
		(*$2)[i]->codegen();
		
	//oslobadjamo memoriju
	for(unsigned i = 0; i< $1->size();i++)
		delete (*$1)[i];
	delete $1;
	for(unsigned i = 0; i< $2->size();i++)
		delete (*$2)[i];
	delete $2;
}
;
NizPrototipova1: NizPrototipova {
	$$ = $1;
}
| {
	$$ = new vector<PrototypeAST *>();
}
;
NizPrototipova : NizPrototipova Prot ';'{
	$$ = $1;
	$$->push_back($2);
}
| Prot ';' {
	$$ = new vector<PrototypeAST *>();
	$$->push_back($1);
}
;
Prot: extern_token Prototip  {
	$$ = $2;
}
;
NizFunkcija: NizFunkcija Funkcija ';' {
	$$ = $1;
	$$->push_back($2);
}	
| Funkcija ';' {
	$$ = new vector<FunctionAST*>();
	$$->push_back($1);
}
;
Funkcija: function_token Prototip ':' E   {
	$$ = new FunctionAST($2,$4);
}
;
Blok: begin_token E ';' end_token{
	PrototypeAST *tmp = new PrototypeAST("begin_end_blok",vector<string>());
	$$ = new FunctionAST(tmp,$2);
}	
;
Prototip: id_token '(' Args1 ')' {
	$$ = new PrototypeAST(*$1,*$3);
	delete $3;
	delete $1;
}
;
Args1: Args {
	$$ = $1;
}
| {
	$$ = new vector<string>();
}
;
Args: Args ',' id_token {
	$$ = $1;
	$$->push_back(*$3);
	delete $3;
}
| id_token {
	$$ = new vector<string>();
	$$->push_back(*$1);
	delete $1;
}
;
E : E '+' E {
	$$ = new AddAST($1,$3);
}
| 	E '-' E {
	$$ = new SubAST($1,$3);
}
|   E '*' E {
	$$ = new MulAST($1,$3);
}
| 	E '/' E {
	$$ = new DivAST($1,$3);
}
|   '(' E ')'{
	$$ = $2;
}
|   num_token {
	$$ = new ConstantAST($1);
}
|   id_token {
	$$ = new VariableAST(*$1);
	delete $1;
}
|   id_token '(' NizArgs ')' {
	//ovo je poziv funkcije
	$$ = new CallAST(*$1,*$3);
	delete $1;
	delete $3;
}
| if_token E then_token E else_token E {
	$$ = new IfAST($2,$4,$6);
}
| id_token dodela_token E	{
 	$$ = new AssignAST($3,*$1);
 		delete $1;
}
| var_token NizInic {
	$$ = new VarAST(*$2);
	delete $2;
}
| E ':' E {
	$$ = new SeqAST($1,$3);
}	
;
NizInic: NizInic ',' Inic {
  $$ = $1;
  $$->push_back(*$3);
  delete $3;
 }
| Inic {
  $$ = new vector<pair<string, ExprAST*> >();
  $$->push_back(*$1);
  delete $1;
 }
;

Inic: id_token dodela_token E {
  $$ = new pair<string, ExprAST*>(*$1, $3);
  delete $1;
 }
| id_token {
  $$ = new pair<string, ExprAST*>(*$1, new ConstantAST(0));
  delete $1;
  }
;
NizArgs: NizArgs1 {
	$$ = $1;
}
|	 {
	$$ = new vector<ExprAST*>();
}
;
NizArgs1: NizArgs1 ',' E {
	$$ = $1;
	$$->push_back($3);
}
| E {
	$$ = new vector<ExprAST*>();
	$$->push_back($1);
}
;


%%
extern LLVMContext TheContext;
extern Module* TheModule;

int main() {
//	yydebug = 1;
	IntializeModuleAndPassManager();
  yyparse();
  
  TheModule->print(outs(), nullptr);
  /*
  string TargetTriple = sys::getDefaultTargetTriple();

  InitializeAllTargetInfos();
  InitializeAllTargets();
  InitializeAllTargetMCs();
  InitializeAllAsmParsers();
  InitializeAllAsmPrinters();

  std::string Error;
  auto Target = TargetRegistry::lookupTarget(TargetTriple, Error);
  
  if (!Target) {
    errs() << Error;
    return 1;
  }

  auto CPU = "generic";
  auto Features = "";
  
  TargetOptions opt;
  auto RM = Optional<Reloc::Model>();
  auto TargetMachine = Target->createTargetMachine(TargetTriple, CPU, Features, opt, RM);

  TheModule->setDataLayout(TargetMachine->createDataLayout());
  TheModule->setTargetTriple(TargetTriple);

  string Filename = "output.o";
  std::error_code EC;
  //F_None umesto OF_None
  raw_fd_ostream dest(Filename, EC, sys::fs::F_None);
  
  if (EC) {
    errs() << "Could not open file: " << EC.message();
    return 1;
  }

  legacy::PassManager pass;
  auto FileType = llvm::LLVMTargetMachine::CGFT_ObjectFile;
  
  
  // izbrisan treci argument nullptr
  if (TargetMachine->addPassesToEmitFile(pass, dest, FileType)) {
    errs() << "TargetMachine can't emit a file of this type";
    return 1;
  }
  
   pass.run(*TheModule);

  dest.flush();
  dest.close();*/

  DeleteModuleAndPassManager();
  
  return 0;
}
